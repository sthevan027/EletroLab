import{X as t}from"./db-vendor-CG99BKJT.js";import{q as e,l as a,o as r,c as i,g as n,d as o,s,a as c,i as l,b as u}from"./firebase-vendor-2an6GMdZ.js";const d=void 0!==import.meta&&{}||("undefined"!=typeof importMetaEnv?importMetaEnv:{}),p={apiKey:d.VITE_FB_API_KEY||"",authDomain:d.VITE_FB_AUTH_DOMAIN||"",projectId:d.VITE_FB_PROJECT_ID||"",storageBucket:d.VITE_FB_STORAGE||"",messagingSenderId:d.VITE_FB_MSG||"",appId:d.VITE_FB_APP_ID||""},m=!!p.projectId,g=m?l(p):void 0,y=m?c(g):void 0,h={isEnabled:()=>m,getUserId(){const t="eletrilab_user_id";let e=localStorage.getItem(t);return e||(e=crypto.randomUUID(),localStorage.setItem(t,e)),e},async saveIRReport(t,e){if(!m)return;const a=o(i(y,`users/${t}/irReports`));await s(a,{...e,createdAt:u()},{merge:!0})},async saveMultiReport(t,e){if(!m)return;const a=o(i(y,`users/${t}/multiReports`));await s(a,{...e,createdAt:u()},{merge:!0})},async getRecentReports(t,o=10){if(!m)return[];const s=e(i(y,`users/${t}/irReports`),r("createdAt","desc"),a(o)),c=e(i(y,`users/${t}/multiReports`),r("createdAt","desc"),a(o)),[l,u]=await Promise.all([n(s),n(c)]);return[...l.docs.map(t=>({id:t.id,type:"ir",...t.data()})),...u.docs.map(t=>({id:t.id,type:"multi",...t.data()}))].map(t=>({...t,createdAtMs:t.createdAt?.toMillis?.()||0})).sort((t,e)=>e.createdAtMs-t.createdAtMs).slice(0,o)}};const f=new class extends t{equipment;report;test;configuration;irReports;parameters;multiPhaseConfigs;multiPhaseReports;aiLearningHistory;categoryProfiles;systemConfigs;constructor(){super("EletriLabDB"),this.version(4).stores({equipment:"id, tag, category, status, location, manufacturer",report:"id, number, date, client, status, responsible",test:"id, reportId, equipmentId, testType, result, performedAt",configuration:"id",irReports:"++id, category, createdAt, isSaved",parameters:"++id, key, category",multiPhaseConfigs:"++id, equipmentType, createdAt",multiPhaseReports:"++id, configId, createdAt, isSaved",aiLearningHistory:"++id, category, phaseCount, createdAt",categoryProfiles:"++id, category, createdAt",systemConfigs:"++id, createdAt"})}},w={megger:{motor:{min:50,good:500,unit:"MΩ"},transformador:{min:100,good:1e3,unit:"MΩ"},gerador:{min:50,good:500,unit:"MΩ"},painel:{min:20,good:200,unit:"MΩ"},cabo:{min:100,good:1e3,unit:"MΩ"},outro:{min:50,good:500,unit:"MΩ"}},hipot:{motor:{min:1e3,good:2e3,unit:"V"},transformador:{min:2e3,good:5e3,unit:"V"},gerador:{min:1e3,good:2e3,unit:"V"},painel:{min:500,good:1e3,unit:"V"},cabo:{min:2e3,good:5e3,unit:"V"},outro:{min:1e3,good:2e3,unit:"V"}}},A={cabo:{id:"profile-cabo",category:"cabo",name:"Perfil Cabo",description:"Perfil padrão para cabos de potência e controle",baseResistance:{min:5e9,max:2e10,decay:.1},temperature:{min:20,max:30,effect:.02},humidity:{min:40,max:60,effect:.01},aiConfidence:.9,createdAt:new Date},motor:{id:"profile-motor",category:"motor",name:"Perfil Motor",description:"Perfil padrão para motores elétricos",baseResistance:{min:1e9,max:5e9,decay:.08},temperature:{min:20,max:35,effect:.025},humidity:{min:35,max:65,effect:.015},aiConfidence:.85,createdAt:new Date},bomba:{id:"profile-bomba",category:"bomba",name:"Perfil Bomba",description:"Perfil padrão para bombas e sistemas hidráulicos",baseResistance:{min:1e9,max:5e9,decay:.08},temperature:{min:20,max:35,effect:.025},humidity:{min:35,max:65,effect:.015},aiConfidence:.85,createdAt:new Date},trafo:{id:"profile-trafo",category:"trafo",name:"Perfil Transformador",description:"Perfil padrão para transformadores de potência",baseResistance:{min:1e10,max:5e10,decay:.12},temperature:{min:15,max:25,effect:.03},humidity:{min:30,max:50,effect:.02},aiConfidence:.95,createdAt:new Date},outro:{id:"profile-outro",category:"outro",name:"Perfil Genérico",description:"Perfil padrão para outros equipamentos",baseResistance:{min:5e8,max:5e9,decay:.05},temperature:{min:20,max:30,effect:.015},humidity:{min:40,max:60,effect:.01},aiConfidence:.8,createdAt:new Date}};async function R(){try{f.isOpen()||await f.open();await f.configuration.get("default")||await f.configuration.put({id:"default",...w});0===(await f.categoryProfiles.toArray()).length&&await async function(){const t=Object.values(A);await f.categoryProfiles.bulkAdd(t)}()}catch(t){try{localStorage.getItem("eletrilab-config")||localStorage.setItem("eletrilab-config",JSON.stringify(w))}catch(e){}}}const P={async getAllEquipment(){try{return await f.equipment.toArray()}catch(t){return[]}},async getEquipmentById(t){try{return await f.equipment.get(t)}catch(e){return}},async addEquipment(t){try{const e=crypto.randomUUID(),a=(new Date).toISOString(),r={...t,id:e,createdAt:a,updatedAt:a};return await f.equipment.add(r),e}catch(e){throw e}},async updateEquipment(t,e){try{await f.equipment.get(t)&&await f.equipment.update(t,{...e,updatedAt:(new Date).toISOString()})}catch(a){throw a}},async deleteEquipment(t){try{await f.equipment.delete(t)}catch(e){throw e}},async getAllReports(){try{return await f.report.toArray()}catch(t){return[]}},async getReportById(t){try{return await f.report.get(t)}catch(e){return}},async addReport(t){try{const e=crypto.randomUUID(),a=(new Date).toISOString(),r={...t,id:e,createdAt:a,updatedAt:a};await f.report.add(r);try{h.isEnabled()&&await h.saveIRReport(h.getUserId(),r)}catch{}return e}catch(e){throw e}},async updateReport(t,e){try{await f.report.get(t)&&await f.report.update(t,{...e,updatedAt:(new Date).toISOString()})}catch(a){throw a}},async deleteReport(t){try{await f.report.delete(t),await f.test.where("reportId").equals(t).delete()}catch(e){throw e}},async getAllTests(){try{return await f.test.toArray()}catch(t){return[]}},async getTestsByReportId(t){try{return await f.test.where("reportId").equals(t).toArray()}catch(e){return[]}},async addTest(t){try{const e=crypto.randomUUID(),a=(new Date).toISOString(),r={...t,id:e,createdAt:a,updatedAt:a};return await f.test.add(r),e}catch(e){throw e}},async updateTest(t,e){try{await f.test.get(t)&&await f.test.update(t,{...e,updatedAt:(new Date).toISOString()})}catch(a){throw a}},async deleteTest(t){try{await f.test.delete(t)}catch(e){throw e}},async getConfiguration(){try{return await f.configuration.get("default")||w}catch(t){const e=localStorage.getItem("eletrilab-config");return e?JSON.parse(e):w}},async updateConfiguration(t){try{await f.configuration.put({id:"default",...t}),localStorage.setItem("eletrilab-config",JSON.stringify(t))}catch(e){localStorage.setItem("eletrilab-config",JSON.stringify(t))}},async getAllIRReports(){try{return await f.irReports.toArray()}catch(t){return[]}},async getSavedIRReports(){try{return await f.irReports.where("isSaved").equals(1).toArray()}catch(t){return[]}},async getIRReportsByCategory(t){try{return await f.irReports.where("category").equals(t).toArray()}catch(e){return[]}},async saveIRReport(t){try{await f.irReports.add(t)}catch(e){throw e}},async getIRReport(t){try{return await f.irReports.get(t)||null}catch(e){return null}},async updateIRReport(t,e){try{await f.irReports.update(t,e)}catch(a){throw a}},async deleteIRReport(t){try{await f.irReports.delete(t)}catch(e){throw e}},async getSystemConfig(){try{return(await f.systemConfigs.toArray())[0]||null}catch(t){return null}},async saveSystemConfig(t){try{await f.systemConfigs.add(t)}catch(e){throw e}},async getCategoryProfiles(){try{return await f.categoryProfiles.toArray()}catch(t){return[]}},async getCategoryProfile(t){try{return await f.categoryProfiles.where("category").equals(t).first()||null}catch(e){return null}},async saveCategoryProfile(t){try{await f.categoryProfiles.add(t)}catch(e){throw e}},async getAILearningHistory(t){try{return await f.aiLearningHistory.where("category").equals(t).toArray()}catch(e){return[]}},async saveAILearningHistory(t){try{await f.aiLearningHistory.add(t)}catch(e){throw e}},async getMultiPhaseConfigs(){try{return await f.multiPhaseConfigs.toArray()}catch(t){return[]}},async saveMultiPhaseConfig(t){try{await f.multiPhaseConfigs.add(t)}catch(e){throw e}},async getMultiPhaseReports(){try{return await f.multiPhaseReports.toArray()}catch(t){return[]}},async getMultiPhaseReport(t){try{return await f.multiPhaseReports.get(t)||null}catch(e){return null}},async saveMultiPhaseReport(t){try{await f.multiPhaseReports.add(t);try{h.isEnabled()&&await h.saveMultiReport(h.getUserId(),{...t,createdAt:t.createdAt})}catch{}}catch(e){throw e}},async getParameters(t){try{return await f.parameters.where("category").equals(t).toArray()}catch(e){return[]}},async exportAll(){try{const[t,e,a,r,i,n,o,s,c,l]=await Promise.all([f.equipment.toArray(),f.report.toArray(),f.test.toArray(),f.irReports.toArray(),f.multiPhaseConfigs.toArray(),f.multiPhaseReports.toArray(),f.aiLearningHistory.toArray(),f.categoryProfiles.toArray(),f.systemConfigs.toArray(),f.configuration.toArray()]);return{version:1,exportedAt:(new Date).toISOString(),equipment:t,reports:e,tests:a,irReports:r,multiConfigs:i,multiReports:n,ai:o,profiles:s,system:c,configuration:l}}catch(t){throw t}},async importAll(t,e={clearBefore:!0}){const a=!1!==e.clearBefore;try{a&&(await f.transaction("rw",f.equipment,f.report,f.test,async()=>{await Promise.all([f.equipment.clear(),f.report.clear(),f.test.clear()])}),await f.transaction("rw",f.irReports,f.multiPhaseConfigs,f.multiPhaseReports,async()=>{await Promise.all([f.irReports.clear(),f.multiPhaseConfigs.clear(),f.multiPhaseReports.clear()])}),await f.transaction("rw",f.aiLearningHistory,f.categoryProfiles,f.systemConfigs,f.configuration,async()=>{await Promise.all([f.aiLearningHistory.clear(),f.categoryProfiles.clear(),f.systemConfigs.clear(),f.configuration.clear()])})),await f.transaction("rw",f.equipment,f.report,f.test,async()=>{t.equipment?.length&&await f.equipment.bulkAdd(t.equipment),t.reports?.length&&await f.report.bulkAdd(t.reports),t.tests?.length&&await f.test.bulkAdd(t.tests)}),await f.transaction("rw",f.irReports,f.multiPhaseConfigs,f.multiPhaseReports,async()=>{t.irReports?.length&&await f.irReports.bulkAdd(t.irReports),t.multiConfigs?.length&&await f.multiPhaseConfigs.bulkAdd(t.multiConfigs),t.multiReports?.length&&await f.multiPhaseReports.bulkAdd(t.multiReports)}),await f.transaction("rw",f.aiLearningHistory,f.categoryProfiles,f.systemConfigs,f.configuration,async()=>{t.ai?.length&&await f.aiLearningHistory.bulkAdd(t.ai),t.profiles?.length&&await f.categoryProfiles.bulkAdd(t.profiles),t.system?.length&&await f.systemConfigs.bulkAdd(t.system),t.configuration?.length&&await f.configuration.bulkAdd(t.configuration)})}catch(r){throw r}},async saveParameter(t){try{await f.parameters.add(t)}catch(e){throw e}},async getDashboardStats(){try{const[t,e,a,r,i]=await Promise.all([f.irReports.count(),f.multiPhaseReports.count(),f.report.count(),f.equipment.count(),f.test.count()]),n=t+e+a,o=(new Date).toISOString().split("T")[0],[s,c,l]=await Promise.all([f.irReports.filter(t=>(t.createdAt instanceof Date?t.createdAt:new Date(t.createdAt)).toISOString().startsWith(o)).count(),f.multiPhaseReports.filter(t=>(t.createdAt instanceof Date?t.createdAt:new Date(t.createdAt)).toISOString().startsWith(o)).count(),f.report.filter(t=>(t.createdAt?new Date(t.createdAt):new Date(0)).toISOString().startsWith(o)).count()]),u=s+c+l,[d,p]=await Promise.all([f.multiPhaseReports.count(),f.aiLearningHistory.count()]),[m,g,y]=await Promise.all([f.irReports.orderBy("createdAt").reverse().limit(5).toArray(),f.multiPhaseReports.orderBy("createdAt").reverse().limit(5).toArray(),f.report.toArray()]),h=y.filter(t=>t.createdAt).sort((t,e)=>new Date(e.createdAt).getTime()-new Date(t.createdAt).getTime()).slice(0,5);return{totalReports:n,totalEquipment:r,totalTests:i,savedToday:u,multiPhase:d,aiLearning:p,resultsDistribution:{BOM:0,"ACEITÁVEL":0,REPROVADO:0},categoryDistribution:{},recentReports:[...m,...g,...h].sort((t,e)=>{const a=t.createdAt instanceof Date?t.createdAt.getTime():new Date(t.createdAt).getTime();return(e.createdAt instanceof Date?e.createdAt.getTime():new Date(e.createdAt).getTime())-a}).slice(0,5)}}catch(t){return{totalReports:0,totalEquipment:0,totalTests:0,savedToday:0,multiPhase:0,aiLearning:0,resultsDistribution:{BOM:0,"ACEITÁVEL":0,REPROVADO:0},categoryDistribution:{},recentReports:[]}}},async recordAILearning(t){try{await f.aiLearningHistory.add(t)}catch(e){throw e}},async getNextReportNumber(){try{const t=await f.irReports.count();return`REP-${String(t+1).padStart(4,"0")}`}catch(t){return`REP-${String(Date.now()).slice(-4)}`}},async updateCategoryProfile(t){try{await f.categoryProfiles.put(t)}catch(e){throw e}},async deleteCategoryProfile(t){try{await f.categoryProfiles.delete(t)}catch(e){throw e}},async clearDatabase(){try{await f.equipment.clear(),await f.report.clear(),await f.test.clear(),await f.configuration.clear(),await f.irReports.clear(),await f.parameters.clear(),await f.multiPhaseConfigs.clear(),await f.multiPhaseReports.clear(),await f.aiLearningHistory.clear(),await f.categoryProfiles.clear(),await f.systemConfigs.clear()}catch(t){throw t}}};const C=new class{patterns=new Map;learningRate=.1;confidenceThreshold=.7;constructor(){this.loadPatterns()}async generateIRReport(t){const e=await this.analyzePatterns(t),a=await this.predictValues(t,e),r=this.applyEnvironmentalAdjustments(a,t.environmentalFactors),i=await this.generateInsights(t,r),n=this.calculateConfidence(e,i);return{readings:this.formatReadings(r,t),confidence:n,insights:i,patterns:e,warnings:this.generateWarnings(i),recommendations:this.generateRecommendations(i)}}async analyzePatterns(t){const e=await P.getAILearningHistory(t.category);if(e.length<3)return this.getDefaultPatterns(t.category);const a=this.performKMeansClustering(e,3).map((e,a)=>({id:`pattern_${t.category}_${a}`,category:t.category,pattern:e.centroid,confidence:e.confidence,frequency:e.frequency,lastUsed:new Date,createdAt:new Date}));return await this.savePatterns(a),a}async predictValues(t,e){if(0===e.length)return this.getDefaultValues(t.category);const a=e.reduce((t,e)=>e.confidence>t.confidence?e:t),r=this.generateTimeSeries(a.pattern);return t.equipmentAge?this.adjustForEquipmentAge(r,t.equipmentAge):r}applyEnvironmentalAdjustments(t,e){return t.map(t=>t*Math.exp(-.05*(e.temperature-25))*Math.exp(-.02*(e.humidity-50))*(e.pressure?Math.exp(.001*(e.pressure-1013)):1))}async generateInsights(t,e){const a=[],r=this.analyzeTrend(e);r.significance>.8&&a.push({type:"trend",confidence:r.significance,description:`Tendência ${r.direction} detectada nos valores de resistência`,recommendation:"decrescente"===r.direction?"Recomenda-se manutenção preventiva":"Equipamento em bom estado",data:{slope:r.slope,r2:r.r2}});const i=this.detectAnomalies(e);if(i.length>0&&a.push({type:"anomaly",confidence:.9,description:`${i.length} anomalia(s) detectada(s) nos valores`,recommendation:"Verificar condições de teste e equipamento",data:{anomalies:i}}),t.historicalData.length>0){const r=this.calculateHistoricalCorrelation(e,t.historicalData);a.push({type:"correlation",confidence:Math.abs(r),description:`Correlação ${r>0?"positiva":"negativa"} com histórico`,recommendation:r>.7?"Padrão consistente com histórico":"Desvio significativo do padrão histórico",data:{correlation:r}})}const n=this.predictFailureRisk(e,t);return n>.3&&a.push({type:"prediction",confidence:n,description:`Risco de falha estimado em ${(100*n).toFixed(1)}%`,recommendation:"Ação preventiva recomendada",data:{riskLevel:n}}),a}performKMeansClustering(t,e){if(t.length<e)return t.map((t,e)=>({centroid:t,confidence:.5,frequency:1}));const a=this.initializeCentroids(t,e);let r=this.assignToClusters(t,a);for(let i=0;i<10;i++){const e=this.updateCentroids(r),a=this.assignToClusters(t,e);if(this.hasConverged(r,a))break;r=a}return r.map(e=>({centroid:this.calculateCentroid(e),confidence:this.calculateClusterConfidence(e),frequency:e.length/t.length}))}analyzeTrend(t){const e=t.length,a=Array.from({length:e},(t,e)=>e),r=a.reduce((t,e)=>t+e,0),i=t.reduce((t,e)=>t+e,0),n=a.reduce((e,a,r)=>e+a*t[r],0),o=a.reduce((t,e)=>t+e*e,0);t.reduce((t,e)=>t+e*e,0);const s=(e*n-r*i)/(e*o-r*r),c=(i-s*r)/e,l=i/e,u=1-t.reduce((t,e,a)=>{const r=s*a+c;return t+Math.pow(e-r,2)},0)/t.reduce((t,e)=>t+Math.pow(e-l,2),0);return{direction:s>0?"crescente":"decrescente",slope:s,r2:u,significance:Math.abs(u)}}detectAnomalies(t){const e=t.reduce((t,e)=>t+e,0)/t.length,a=t.reduce((t,a)=>t+Math.pow(a-e,2),0)/t.length,r=Math.sqrt(a);return t.map((t,a)=>({value:t,index:a,zScore:Math.abs((t-e)/r)})).filter(t=>t.zScore>2).map(t=>t.index)}calculateHistoricalCorrelation(t,e){if(0===e.length)return 0;const a=e[0];return a.length!==t.length?0:this.calculatePearsonCorrelation(t,a)}predictFailureRisk(t,e){let a=0;const r=t[0],i=(r-t[t.length-1])/r;if(a+=Math.max(0,2*i),e.equipmentAge){a+=.3*Math.min(1,e.equipmentAge/20)}return(e.environmentalFactors.temperature>40||e.environmentalFactors.humidity>80)&&(a+=.2),e.maintenanceHistory&&0===e.maintenanceHistory.length&&(a+=.1),Math.min(1,a)}calculatePearsonCorrelation(t,e){const a=t.length,r=t.reduce((t,e)=>t+e,0),i=e.reduce((t,e)=>t+e,0),n=t.reduce((t,a,r)=>t+a*e[r],0),o=t.reduce((t,e)=>t+e*e,0),s=e.reduce((t,e)=>t+e*e,0),c=a*n-r*i,l=Math.sqrt((a*o-r*r)*(a*s-i*i));return 0===l?0:c/l}getDefaultPatterns(t){const e={motor:[5e9,48e8,45e8,42e8],trafo:[1e10,98e8,95e8,92e8],bomba:[3e9,29e8,27e8,25e8],cabo:[8e9,78e8,75e8,72e8],outro:[4e9,39e8,37e8,35e8]};return[{id:`default_${t}`,category:t,pattern:e[t]||e.outro,confidence:.6,frequency:1,lastUsed:new Date,createdAt:new Date}]}getDefaultValues(t){const e={motor:[5e9,48e8,45e8,42e8],trafo:[1e10,98e8,95e8,92e8],bomba:[3e9,29e8,27e8,25e8],cabo:[8e9,78e8,75e8,72e8],outro:[4e9,39e8,37e8,35e8]};return e[t]||e.outro}generateTimeSeries(t){return t.map((t,e)=>t*(1+.1*(Math.random()-.5)))}adjustForEquipmentAge(t,e){const a=Math.exp(.05*-e);return t.map(t=>t*a)}formatReadings(t,e){const a=["00:15","00:30","00:45","01:00"];return t.map((t,e)=>({time:a[e],kv:"1.00",resistance:this.formatResistance(t)}))}formatResistance(t){return t>=1e9?`${(t/1e9).toFixed(3)}GΩ`:t>=1e6?`${(t/1e6).toFixed(3)}MΩ`:`${(t/1e3).toFixed(3)}kΩ`}calculateConfidence(t,e){return((t.length>0?t.reduce((t,e)=>t+e.confidence,0)/t.length:.5)+(e.length>0?e.reduce((t,e)=>t+e.confidence,0)/e.length:.5))/2}generateWarnings(t){return t.filter(t=>"anomaly"===t.type||"prediction"===t.type).map(t=>t.description)}generateRecommendations(t){return t.map(t=>t.recommendation)}initializeCentroids(t,e){const a=[];for(let r=0;r<e;r++){const e=Math.floor(Math.random()*t.length);a.push(t[e])}return a}assignToClusters(t,e){const a=Array(e.length).fill(null).map(()=>[]);return t.forEach(t=>{let r=1/0,i=0;e.forEach((e,a)=>{const n=this.calculateDistance(t,e);n<r&&(r=n,i=a)}),a[i].push(t)}),a}updateCentroids(t){return t.map(t=>0===t.length?null:this.calculateCentroid(t)).filter(t=>null!==t)}calculateCentroid(t){if(0===t.length)return null;const e=t[0].length,a=Array(e).fill(0);return t.forEach(t=>{t.forEach((t,e)=>{a[e]+=t})}),a.map(e=>e/t.length)}calculateDistance(t,e){return Math.sqrt(t.reduce((t,a,r)=>t+Math.pow(a-e[r],2),0))}hasConverged(t,e){return t.length===e.length}calculateClusterConfidence(t){const e=t.length,a=this.calculateClusterCohesion(t);return Math.min(1,e/10*a)}calculateClusterCohesion(t){if(t.length<=1)return 1;const e=this.calculateCentroid(t),a=t.map(t=>this.calculateDistance(t,e)),r=a.reduce((t,e)=>t+e,0)/a.length,i=Math.max(...a);return i>0?1-r/i:1}async loadPatterns(){}async savePatterns(t){t.forEach(t=>{const e=this.patterns.get(t.category)||[];e.push(t),this.patterns.set(t.category,e)})}};export{C as a,h as c,P as d,R as i};
